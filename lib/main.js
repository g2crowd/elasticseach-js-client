// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (this.Elastic == null) {
    this.Elastic = {};
  }

  (function(ES, $) {
    return ES.Client = (function() {
      function Client(query1, opts1) {
        this.query = query1;
        this.opts = opts1 != null ? opts1 : {};
        this.transport = this.opts.transport || $;
      }

      Client.prototype.send = function(opts) {
        if (opts == null) {
          opts = {};
        }
        return this.transport.ajax({
          url: this.opts.url,
          type: 'POST',
          data: JSON.stringify(this.query.toJSON()),
          dataType: 'json',
          headers: {
            Authorization: 'Basic ' + btoa(this.opts.userinfo)
          },
          success: function(data) {
            var docs;
            if (!opts.success) {
              return;
            }
            docs = data.hits.hits;
            return opts.success(ES.Model.deserialize(docs), data);
          },
          error: opts.error
        });
      };

      return Client;

    })();
  })(Elastic, jQuery);

  (function($, ES) {
    var registered;
    registered = {};
    ES.DuplicateModelError = (function(superClass) {
      extend(DuplicateModelError, superClass);

      function DuplicateModelError(name) {
        this.message = name + " is already registered";
      }

      return DuplicateModelError;

    })(Error);
    ES.Model = (function() {
      Model.deserialize = function(hits) {
        var hit, i, len, results;
        results = [];
        for (i = 0, len = hits.length; i < len; i++) {
          hit = hits[i];
          results.push($.extend(true, {
            id: hit['_id']
          }, hit._source));
        }
        return results;
      };

      function Model(name, env, attributes1) {
        var boost, item;
        this.attributes = attributes1;
        this.indexName = name + "_" + env;
        this.storedFields = (function() {
          var i, len, ref, results;
          ref = this.selectAttribute('stored', true);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            results.push(item.name);
          }
          return results;
        }).call(this);
        this.textFields = (function() {
          var i, len, ref, results;
          ref = this.selectAttribute('type', 'text');
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            results.push(item.name);
          }
          return results;
        }).call(this);
        this.fulltextFields = (function() {
          var i, len, ref, results;
          ref = this.selectAttribute('fulltext', true);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            boost = item.boost ? "^" + item.boost : '';
            results.push(item.name + boost);
          }
          return results;
        }).call(this);
      }

      Model.prototype.searchPath = function() {
        return "/" + this.indexName + "/_search";
      };

      Model.prototype.selectAttribute = function(key, value) {
        var i, item, len, ref, results;
        ref = this.attributes;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item[key] === value) {
            results.push(item);
          }
        }
        return results;
      };

      return Model;

    })();
    return ES.Registry = (function() {
      function Registry(url, userinfo, env1) {
        this.url = url;
        this.userinfo = userinfo;
        this.env = env1;
        this.registered = {};
      }

      Registry.prototype.register = function(name, attributes) {
        if (this.registered[name]) {
          throw new ES.DuplicateModelError(name);
        }
        return this.registered[name] = new ES.Model(name, this.env, attributes);
      };

      Registry.prototype.get = function(name) {
        return this.registered[name];
      };

      return Registry;

    })();
  })(jQuery, Elastic);

  (function(ES) {
    return ES.Query = (function() {
      function Query(model, fn) {
        this.model = model;
        this.musts = [];
        this.shoulds = [];
        this.filters = [];
        this.mustNots = [];
        this.sorts = [];
        this.booster = null;
        this.from = 0;
        this.size = 10;
        if (fn) {
          fn(this);
        }
      }

      Query.prototype.must = function(value) {
        this.musts.push(value);
        return this;
      };

      Query.prototype.should = function(value) {
        this.shoulds.push(value);
        return this;
      };

      Query.prototype.filter = function(value) {
        this.filters.push(value);
        return this;
      };

      Query.prototype.must_not = function(value) {
        this.mustNots.push(value);
        return this;
      };

      Query.prototype.sort = function(value) {
        this.sorts.push(value);
        return this;
      };

      Query.prototype.boost = function(opts) {
        return this.booster = opts;
      };

      Query.prototype.paginate = function(opts) {
        this.size = parseInt(opts.per || 10, 10);
        return this.from = (parseInt(opts.page || 1, 10) - 1) * this.size;
      };

      Query.prototype.wrapInBoost = function(query) {
        if (!this.booster) {
          return {
            query: query
          };
        } else {
          return {
            query: {
              function_score: {
                query: query,
                field_value_factor: this.booster
              }
            }
          };
        }
      };

      Query.prototype.toJSON = function() {
        var query;
        query = this.wrapInBoost({
          bool: {
            must: this.musts,
            should: this.shoulds,
            filter: this.filters,
            must_not: this.mustNots
          }
        });
        return $.extend(query, {
          sort: this.sorts,
          from: this.from,
          size: this.size,
          _source: this.model.storedFields
        });
      };

      return Query;

    })();
  })(Elastic);

}).call(this);
